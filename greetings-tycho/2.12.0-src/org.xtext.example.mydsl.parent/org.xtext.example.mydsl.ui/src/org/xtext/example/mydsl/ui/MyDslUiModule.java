/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.ui;

import org.eclipse.compare.IViewerCreator;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.emf.common.notify.AdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory.Descriptor.Registry;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.text.IDocumentPartitioner;
import org.eclipse.jface.text.ITextHover;
import org.eclipse.jface.text.contentassist.IContentAssistProcessor;
import org.eclipse.jface.text.hyperlink.IHyperlinkDetector;
import org.eclipse.jface.text.presentation.IPresentationDamager;
import org.eclipse.jface.text.presentation.IPresentationRepairer;
import org.eclipse.jface.text.reconciler.IReconciler;
import org.eclipse.jface.text.rules.IPartitionTokenScanner;
import org.eclipse.jface.text.rules.ITokenScanner;
import org.eclipse.jface.text.source.IAnnotationHover;
import org.eclipse.jface.text.source.ICharacterPairMatcher;
import org.eclipse.jface.text.templates.ContextTypeRegistry;
import org.eclipse.jface.text.templates.persistence.TemplateStore;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.ui.views.contentoutline.IContentOutlinePage;
import org.eclipse.xtext.builder.IXtextBuilderParticipant;
import org.eclipse.xtext.formatting.IIndentationInformation;
import org.eclipse.xtext.formatting.IWhitespaceInformationProvider;
import org.eclipse.xtext.generator.IContextualOutputConfigurationProvider;
import org.eclipse.xtext.generator.IShouldGenerate;
import org.eclipse.xtext.ide.editor.bracketmatching.IBracePairProvider;
import org.eclipse.xtext.ide.editor.contentassist.antlr.IContentAssistParser;
import org.eclipse.xtext.ide.editor.partialEditing.IPartialEditingContentAssistParser;
import org.eclipse.xtext.preferences.IPreferenceValuesProvider;
import org.eclipse.xtext.resource.IExternalContentSupport.IExternalContentProvider;
import org.eclipse.xtext.resource.containers.IAllContainersState;
import org.eclipse.xtext.ui.IImageHelper;
import org.eclipse.xtext.ui.IImageHelper.IImageDescriptorHelper;
import org.eclipse.xtext.ui.codetemplates.ui.partialEditing.IPartialEditingContentAssistContextFactory;
import org.eclipse.xtext.ui.codetemplates.ui.preferences.TemplatesLanguageConfiguration;
import org.eclipse.xtext.ui.codetemplates.ui.registry.LanguageRegistrar;
import org.eclipse.xtext.ui.codetemplates.ui.registry.LanguageRegistry;
import org.eclipse.xtext.ui.editor.DocumentBasedDirtyResource;
import org.eclipse.xtext.ui.editor.IXtextEditorCallback;
import org.eclipse.xtext.ui.editor.autoedit.AbstractEditStrategyProvider;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext.Factory;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalPostProcessor;
import org.eclipse.xtext.ui.editor.contentassist.IContentAssistantFactory;
import org.eclipse.xtext.ui.editor.contentassist.IContentProposalProvider;
import org.eclipse.xtext.ui.editor.contentassist.IProposalConflictHelper;
import org.eclipse.xtext.ui.editor.contentassist.ITemplateProposalProvider;
import org.eclipse.xtext.ui.editor.contentassist.PrefixMatcher;
import org.eclipse.xtext.ui.editor.copyqualifiedname.CopyQualifiedNameService;
import org.eclipse.xtext.ui.editor.formatting.IContentFormatterFactory;
import org.eclipse.xtext.ui.editor.hover.IEObjectHover;
import org.eclipse.xtext.ui.editor.model.IResourceForEditorInputFactory;
import org.eclipse.xtext.ui.editor.outline.IOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.IOutlineTreeStructureProvider;
import org.eclipse.xtext.ui.editor.outline.impl.OutlineFilterAndSorter.IComparator;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionProvider;
import org.eclipse.xtext.ui.editor.syntaxcoloring.IHighlightingHelper;
import org.eclipse.xtext.ui.editor.templates.XtextTemplatePreferencePage;
import org.eclipse.xtext.ui.editor.toggleComments.ISingleLineCommentHelper;
import org.eclipse.xtext.ui.markers.IMarkerContributor;
import org.eclipse.xtext.ui.refactoring.IDependentElementsCalculator;
import org.eclipse.xtext.ui.refactoring.IReferenceUpdater;
import org.eclipse.xtext.ui.refactoring.IRenameRefactoringProvider;
import org.eclipse.xtext.ui.refactoring.IRenameStrategy;
import org.eclipse.xtext.ui.resource.IResourceSetProvider;
import org.eclipse.xtext.ui.validation.MarkerTypeProvider;
import org.eclipse.xtext.workspace.IProjectConfigProvider;

import com.google.inject.Binder;
import com.google.inject.Provider;

/**
 * Use this class to register components to be used within the Eclipse IDE.
 */
public class MyDslUiModule extends AbstractMyDslUiModule {

	public MyDslUiModule(AbstractUIPlugin plugin) {
		super(plugin);
	}

	@Override
	public Provider<? extends IAllContainersState> provideIAllContainersState() {
		return super.provideIAllContainersState();
	}

	@Override
	public Class<? extends IProposalConflictHelper> bindIProposalConflictHelper() {
		return super.bindIProposalConflictHelper();
	}

	@Override
	public void configureContentAssistLexer(Binder binder) {
		super.configureContentAssistLexer(binder);
	}

	@Override
	public void configureHighlightingLexer(Binder binder) {
		super.configureHighlightingLexer(binder);
	}

	@Override
	public void configureHighlightingTokenDefProvider(Binder binder) {
		super.configureHighlightingTokenDefProvider(binder);
	}

	@Override
	public Class<? extends Factory> bindContentAssistContext$Factory() {
		return super.bindContentAssistContext$Factory();
	}

	@Override
	public Class<? extends IContentAssistParser> bindIContentAssistParser() {
		return super.bindIContentAssistParser();
	}

	@Override
	public void configureContentAssistLexerProvider(Binder binder) {
		super.configureContentAssistLexerProvider(binder);
	}

	@Override
	public Class<? extends PrefixMatcher> bindPrefixMatcher() {
		return super.bindPrefixMatcher();
	}

	@Override
	public Class<? extends IDependentElementsCalculator> bindIDependentElementsCalculator() {
		return super.bindIDependentElementsCalculator();
	}

	@Override
	public void configureIResourceDescriptionsBuilderScope(Binder binder) {
		super.configureIResourceDescriptionsBuilderScope(binder);
	}

	@Override
	public Class<? extends IXtextEditorCallback> bindIXtextEditorCallback() {
		return super.bindIXtextEditorCallback();
	}

	@Override
	public Class<? extends IContextualOutputConfigurationProvider> bindIContextualOutputConfigurationProvider() {
		return super.bindIContextualOutputConfigurationProvider();
	}

	@Override
	public void configureIResourceDescriptionsPersisted(Binder binder) {
		super.configureIResourceDescriptionsPersisted(binder);
	}

	@Override
	public Class<? extends DocumentBasedDirtyResource> bindDocumentBasedDirtyResource() {
		return super.bindDocumentBasedDirtyResource();
	}

	@Override
	public Class<? extends IXtextBuilderParticipant> bindIXtextBuilderParticipant() {
		return super.bindIXtextBuilderParticipant();
	}

	@Override
	public IWorkspaceRoot bindIWorkspaceRootToInstance() {
		return super.bindIWorkspaceRootToInstance();
	}

	@Override
	public void configureBuilderPreferenceStoreInitializer(Binder binder) {
		super.configureBuilderPreferenceStoreInitializer(binder);
	}

	@Override
	public Class<? extends ILabelProvider> bindILabelProvider() {
		return super.bindILabelProvider();
	}

	@Override
	public void configureResourceUIServiceLabelProvider(Binder binder) {
		super.configureResourceUIServiceLabelProvider(binder);
	}

	@Override
	public Class<? extends IOutlineTreeProvider> bindIOutlineTreeProvider() {
		return super.bindIOutlineTreeProvider();
	}

	@Override
	public Class<? extends IOutlineTreeStructureProvider> bindIOutlineTreeStructureProvider() {
		return super.bindIOutlineTreeStructureProvider();
	}

	@Override
	public Class<? extends IssueResolutionProvider> bindIssueResolutionProvider() {
		return super.bindIssueResolutionProvider();
	}

	@Override
	public Class<? extends IContentProposalProvider> bindIContentProposalProvider() {
		return super.bindIContentProposalProvider();
	}

	@Override
	public Class<? extends IRenameStrategy> bindIRenameStrategy() {
		return super.bindIRenameStrategy();
	}

	@Override
	public Class<? extends IReferenceUpdater> bindIReferenceUpdater() {
		return super.bindIReferenceUpdater();
	}

	@Override
	public void configureIPreferenceStoreInitializer(Binder binder) {
		super.configureIPreferenceStoreInitializer(binder);
	}

	@Override
	public Class<? extends IRenameRefactoringProvider> bindIRenameRefactoringProvider() {
		return super.bindIRenameRefactoringProvider();
	}

	@Override
	public Class<? extends org.eclipse.xtext.ui.refactoring.ui.IRenameSupport.Factory> bindIRenameSupport$Factory() {
		return super.bindIRenameSupport$Factory();
	}

	@Override
	public Provider<? extends TemplatesLanguageConfiguration> provideTemplatesLanguageConfiguration() {
		return super.provideTemplatesLanguageConfiguration();
	}

	@Override
	public Provider<? extends LanguageRegistry> provideLanguageRegistry() {
		return super.provideLanguageRegistry();
	}

	@Override
	public Class<? extends LanguageRegistrar> bindLanguageRegistrar() {
		return super.bindLanguageRegistrar();
	}

	@Override
	public Class<? extends XtextTemplatePreferencePage> bindXtextTemplatePreferencePage() {
		return super.bindXtextTemplatePreferencePage();
	}

	@Override
	public Class<? extends IPartialEditingContentAssistParser> bindIPartialEditingContentAssistParser() {
		return super.bindIPartialEditingContentAssistParser();
	}

	@Override
	public Class<? extends IPartialEditingContentAssistContextFactory> bindIPartialEditingContentAssistContextFactory() {
		return super.bindIPartialEditingContentAssistContextFactory();
	}

	@Override
	public Class<? extends IViewerCreator> bindIViewerCreator() {
		return super.bindIViewerCreator();
	}

	@Override
	public void configureCompareViewerTitle(Binder binder) {
		super.configureCompareViewerTitle(binder);
	}

	@Override
	public void configure(Binder binder) {
		super.configure(binder);
	}

	@Override
	public void configureBracketMatchingAction(Binder binder) {
		super.configureBracketMatchingAction(binder);
	}

	@Override
	public Class<? extends IImageHelper> bindIImageHelper() {
		return super.bindIImageHelper();
	}

	@Override
	public Class<? extends IImageDescriptorHelper> bindIImageDescriptorHelper() {
		return super.bindIImageDescriptorHelper();
	}

	@Override
	public Class<? extends IIndentationInformation> bindIIndentationInformation() {
		return super.bindIIndentationInformation();
	}

	@Override
	public Class<? extends IWhitespaceInformationProvider> bindIWhitespaceInformationProvider() {
		return super.bindIWhitespaceInformationProvider();
	}

	@Override
	public IPreferenceStore bindIPreferenceStore() {
		return super.bindIPreferenceStore();
	}

	@Override
	public Class<? extends IReconciler> bindIReconciler() {
		return super.bindIReconciler();
	}

	@Override
	public Class<? extends ISingleLineCommentHelper> bindISingleLineCommentHelper() {
		return super.bindISingleLineCommentHelper();
	}

	@Override
	public Class<? extends IHyperlinkDetector> bindIHyperlinkDetector() {
		return super.bindIHyperlinkDetector();
	}

	@Override
	public Class<? extends IPresentationDamager> bindIPresentationDamager() {
		return super.bindIPresentationDamager();
	}

	@Override
	public Class<? extends IPresentationRepairer> bindIPresentationRepairer() {
		return super.bindIPresentationRepairer();
	}

	@Override
	public Class<? extends IBracePairProvider> bindIBracePairProvider() {
		return super.bindIBracePairProvider();
	}

	@Override
	public ICharacterPairMatcher bindICharacterPairMatcher() {
		return super.bindICharacterPairMatcher();
	}

	@Override
	public Class<? extends ITokenScanner> bindITokenScanner() {
		return super.bindITokenScanner();
	}

	@Override
	public Class<? extends IPartitionTokenScanner> bindIPartitionTokenScanner() {
		return super.bindIPartitionTokenScanner();
	}

	@Override
	public Class<? extends IDocumentPartitioner> bindIDocumentPartitioner() {
		return super.bindIDocumentPartitioner();
	}

	@Override
	public Class<? extends IHighlightingHelper> bindIHighlightingHelper() {
		return super.bindIHighlightingHelper();
	}

	@Override
	public Class<? extends AbstractEditStrategyProvider> bindAbstractEditStrategyProvider() {
		return super.bindAbstractEditStrategyProvider();
	}

	@Override
	public Class<? extends AdapterFactory> bindAdapterFactory() {
		return super.bindAdapterFactory();
	}

	@Override
	public Class<? extends AdapterFactoryLabelProvider> bindAdapterFactoryLabelProvider() {
		return super.bindAdapterFactoryLabelProvider();
	}

	@Override
	public Registry bindComposedAdapterFactory$Descriptor$RegistryToInstance() {
		return super.bindComposedAdapterFactory$Descriptor$RegistryToInstance();
	}

	@Override
	public Class<? extends IContentAssistantFactory> bindIContentAssistantFactory() {
		return super.bindIContentAssistantFactory();
	}

	@Override
	public Class<? extends IContentAssistProcessor> bindIContentAssistProcessor() {
		return super.bindIContentAssistProcessor();
	}

	@Override
	public Class<? extends ICompletionProposalPostProcessor> bindICompletionProposalPostProcessor() {
		return super.bindICompletionProposalPostProcessor();
	}

	@Override
	public Class<? extends ITemplateProposalProvider> bindITemplateProposalProvider() {
		return super.bindITemplateProposalProvider();
	}

	@Override
	public Class<? extends TemplateStore> bindTemplateStore() {
		return super.bindTemplateStore();
	}

	@Override
	public Class<? extends ContextTypeRegistry> bindContextTypeRegistry() {
		return super.bindContextTypeRegistry();
	}

	@Override
	public Class<? extends IContentFormatterFactory> bindIContentFormatterFactory() {
		return super.bindIContentFormatterFactory();
	}

	@Override
	public void configureXtextEditorErrorTickUpdater(Binder binder) {
		super.configureXtextEditorErrorTickUpdater(binder);
	}

	@Override
	public Class<? extends IExternalContentProvider> bindIExternalContentSupport$IExternalContentProvider() {
		return super.bindIExternalContentSupport$IExternalContentProvider();
	}

	@Override
	public void configureHyperlinkLabelProvider(Binder binder) {
		super.configureHyperlinkLabelProvider(binder);
	}

	@Override
	public Class<? extends IContentOutlinePage> bindIContentOutlinePage() {
		return super.bindIContentOutlinePage();
	}

	@Override
	public void configureIOutlineContribution$Composite(Binder binder) {
		super.configureIOutlineContribution$Composite(binder);
	}

	@Override
	public void configureToggleSortingOutlineContribution(Binder binder) {
		super.configureToggleSortingOutlineContribution(binder);
	}

	@Override
	public void configureToggleLinkWithEditorOutlineContribution(Binder binder) {
		super.configureToggleLinkWithEditorOutlineContribution(binder);
	}

	@Override
	public Class<? extends IComparator> bindOutlineFilterAndSorter$IComparator() {
		return super.bindOutlineFilterAndSorter$IComparator();
	}

	@Override
	public void configureContentProposalLabelProvider(Binder binder) {
		super.configureContentProposalLabelProvider(binder);
	}

	@Override
	public void configureLanguageSpecificURIEditorOpener(Binder binder) {
		super.configureLanguageSpecificURIEditorOpener(binder);
	}

	@Override
	public void configureUiEncodingProvider(Binder binder) {
		super.configureUiEncodingProvider(binder);
	}

	@Override
	public Class<? extends org.eclipse.xtext.resource.containers.IAllContainersState.Provider> bindIAllContainersState$Provider() {
		return super.bindIAllContainersState$Provider();
	}

	@Override
	public Class<? extends IResourceForEditorInputFactory> bindIResourceForEditorInputFactory() {
		return super.bindIResourceForEditorInputFactory();
	}

	@Override
	public Class<? extends IResourceSetProvider> bindIResourceSetProvider() {
		return super.bindIResourceSetProvider();
	}

	@Override
	public Class<? extends IAnnotationHover> bindIAnnotationHover() {
		return super.bindIAnnotationHover();
	}

	@Override
	public Class<? extends ITextHover> bindITextHover() {
		return super.bindITextHover();
	}

	@Override
	public Class<? extends IEObjectHover> bindIEObjectHover() {
		return super.bindIEObjectHover();
	}

	@Override
	public void configureMarkOccurrencesAction(Binder binder) {
		super.configureMarkOccurrencesAction(binder);
	}

	@Override
	public void configureIResourceDescriptionsLiveScope(Binder binder) {
		super.configureIResourceDescriptionsLiveScope(binder);
	}

	@Override
	public Class<? extends MarkerTypeProvider> bindMarkerTypeProvider() {
		return super.bindMarkerTypeProvider();
	}

	@Override
	public void configureSmartCaretPreferenceInitializer(Binder binder) {
		super.configureSmartCaretPreferenceInitializer(binder);
	}

	@Override
	public Class<? extends IPreferenceValuesProvider> bindIPreferenceValuesProvider() {
		return super.bindIPreferenceValuesProvider();
	}

	@Override
	public Class<? extends CopyQualifiedNameService> bindCopyQualifiedNameService() {
		return super.bindCopyQualifiedNameService();
	}

	@Override
	public Class<? extends IMarkerContributor> bindMarkerContributor() {
		return super.bindMarkerContributor();
	}

	@Override
	public void configureIQuickOutlineContribution$Composite(Binder binder) {
		super.configureIQuickOutlineContribution$Composite(binder);
	}

	@Override
	public void configureIssueCodesPreferenceInitializer(Binder binder) {
		super.configureIssueCodesPreferenceInitializer(binder);
	}

	@Override
	public Class<? extends IShouldGenerate> bindIShouldGenerate() {
		return super.bindIShouldGenerate();
	}

	@Override
	public Class<? extends IProjectConfigProvider> bindProjectConfigProvider() {
		return super.bindProjectConfigProvider();
	}
	
}
