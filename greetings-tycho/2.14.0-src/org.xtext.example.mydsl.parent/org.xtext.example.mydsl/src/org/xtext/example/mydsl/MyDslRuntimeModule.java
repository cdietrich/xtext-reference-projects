/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl;

import org.eclipse.emf.ecore.EValidator.Registry;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.Diagnostician;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.formatting.IFormatter;
import org.eclipse.xtext.formatting.INodeModelFormatter;
import org.eclipse.xtext.generator.IGenerator2;
import org.eclipse.xtext.linking.ILinker;
import org.eclipse.xtext.linking.ILinkingService;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.parser.IAstFactory;
import org.eclipse.xtext.parser.IEncodingProvider;
import org.eclipse.xtext.parser.IEncodingProvider.Runtime;
import org.eclipse.xtext.parser.IParser;
import org.eclipse.xtext.parser.ITokenToStringConverter;
import org.eclipse.xtext.parser.antlr.IAntlrTokenFileProvider;
import org.eclipse.xtext.parser.antlr.IPartialParsingHelper;
import org.eclipse.xtext.parser.antlr.ITokenDefProvider;
import org.eclipse.xtext.parser.antlr.Lexer;
import org.eclipse.xtext.parsetree.reconstr.ITransientValueService;
import org.eclipse.xtext.resource.IContainer.Manager;
import org.eclipse.xtext.resource.IFragmentProvider;
import org.eclipse.xtext.resource.ILocationInFileProvider;
import org.eclipse.xtext.resource.IResourceFactory;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.serializer.ISerializer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ISyntacticSequencer;
import org.eclipse.xtext.validation.ConfigurableIssueCodesProvider;
import org.eclipse.xtext.validation.IConcreteSyntaxValidator;
import org.xtext.example.mydsl.parser.antlr.internal.InternalMyDslLexer;
import org.xtext.example.mydsl.validation.MyDslValidator;

import com.google.inject.Binder;
import com.google.inject.Provider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class MyDslRuntimeModule extends AbstractMyDslRuntimeModule {

	@Override
	public void configure(Binder binder) {
		super.configure(binder);
	}

	@Override
	public void configureLanguageName(Binder binder) {
		super.configureLanguageName(binder);
	}

	@Override
	public void configureFileExtensions(Binder binder) {
		super.configureFileExtensions(binder);
	}

	@Override
	public ClassLoader bindClassLoaderToInstance() {
		return super.bindClassLoaderToInstance();
	}

	@Override
	public Class<? extends IGrammarAccess> bindIGrammarAccess() {
		return super.bindIGrammarAccess();
	}

	@Override
	public Class<? extends ISemanticSequencer> bindISemanticSequencer() {
		return super.bindISemanticSequencer();
	}

	@Override
	public Class<? extends ISyntacticSequencer> bindISyntacticSequencer() {
		return super.bindISyntacticSequencer();
	}

	@Override
	public Class<? extends ISerializer> bindISerializer() {
		return super.bindISerializer();
	}

	@Override
	public Class<? extends IParser> bindIParser() {
		return super.bindIParser();
	}

	@Override
	public Class<? extends ITokenToStringConverter> bindITokenToStringConverter() {
		return super.bindITokenToStringConverter();
	}

	@Override
	public Class<? extends IAntlrTokenFileProvider> bindIAntlrTokenFileProvider() {
		return super.bindIAntlrTokenFileProvider();
	}

	@Override
	public Class<? extends Lexer> bindLexer() {
		return super.bindLexer();
	}

	@Override
	public Class<? extends ITokenDefProvider> bindITokenDefProvider() {
		return super.bindITokenDefProvider();
	}

	@Override
	public Provider<? extends InternalMyDslLexer> provideInternalMyDslLexer() {
		return super.provideInternalMyDslLexer();
	}

	@Override
	public void configureRuntimeLexer(Binder binder) {
		super.configureRuntimeLexer(binder);
	}

	@Override
	public Class<? extends MyDslValidator> bindMyDslValidator() {
		return super.bindMyDslValidator();
	}

	@Override
	public Class<? extends ConfigurableIssueCodesProvider> bindConfigurableIssueCodesProvider() {
		return super.bindConfigurableIssueCodesProvider();
	}

	@Override
	public Class<? extends IScopeProvider> bindIScopeProvider() {
		return super.bindIScopeProvider();
	}

	@Override
	public void configureIScopeProviderDelegate(Binder binder) {
		super.configureIScopeProviderDelegate(binder);
	}

	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return super.bindIGlobalScopeProvider();
	}

	@Override
	public void configureIgnoreCaseLinking(Binder binder) {
		super.configureIgnoreCaseLinking(binder);
	}

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return super.bindIQualifiedNameProvider();
	}

	@Override
	public Class<? extends Manager> bindIContainer$Manager() {
		return super.bindIContainer$Manager();
	}

	@Override
	public Class<? extends org.eclipse.xtext.resource.containers.IAllContainersState.Provider> bindIAllContainersState$Provider() {
		return super.bindIAllContainersState$Provider();
	}

	@Override
	public void configureIResourceDescriptions(Binder binder) {
		super.configureIResourceDescriptions(binder);
	}

	@Override
	public void configureIResourceDescriptionsPersisted(Binder binder) {
		super.configureIResourceDescriptionsPersisted(binder);
	}

	@Override
	public Class<? extends IGenerator2> bindIGenerator2() {
		return super.bindIGenerator2();
	}

	@Override
	public Registry bindEValidatorRegistry() {
		return super.bindEValidatorRegistry();
	}

	@Override
	public org.eclipse.emf.ecore.EPackage.Registry bindEPackageRegistry() {
		return super.bindEPackageRegistry();
	}

	@Override
	public org.eclipse.xtext.resource.IResourceServiceProvider.Registry bindIResourceServiceProvider$Registry() {
		return super.bindIResourceServiceProvider$Registry();
	}

	@Override
	public Class<? extends Diagnostician> bindDiagnostician() {
		return super.bindDiagnostician();
	}

	@Override
	public Class<? extends IFragmentProvider> bindIFragmentProvider() {
		return super.bindIFragmentProvider();
	}

	@Override
	public Class<? extends ITransientValueService> bindITransientValueService() {
		return super.bindITransientValueService();
	}

	@Override
	public Class<? extends ILocationInFileProvider> bindILocationInFileProvider() {
		return super.bindILocationInFileProvider();
	}

	@Override
	public Class<? extends IFormatter> bindIFormatter() {
		return super.bindIFormatter();
	}

	@Override
	public Class<? extends INodeModelFormatter> bindINodeModelFormatter() {
		return super.bindINodeModelFormatter();
	}

	@Override
	public Class<? extends IConcreteSyntaxValidator> bindConcreteSyntaxValidator() {
		return super.bindConcreteSyntaxValidator();
	}

	@Override
	public Class<? extends IResourceFactory> bindIResourceFactory() {
		return super.bindIResourceFactory();
	}

	@Override
	public Class<? extends ILinkingService> bindILinkingService() {
		return super.bindILinkingService();
	}

	@Override
	public void configureSerializerIScopeProvider(Binder binder) {
		super.configureSerializerIScopeProvider(binder);
	}

	@Override
	public void configureLinkingIScopeProvider(Binder binder) {
		super.configureLinkingIScopeProvider(binder);
	}

	@Override
	public Class<? extends ILinker> bindILinker() {
		return super.bindILinker();
	}

	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return super.bindIValueConverterService();
	}

	@Override
	public Class<? extends IPartialParsingHelper> bindIPartialParserHelper() {
		return super.bindIPartialParserHelper();
	}

	@Override
	public Class<? extends IAstFactory> bindIAstFactory() {
		return super.bindIAstFactory();
	}

	@Override
	public Class<? extends XtextResource> bindXtextResource() {
		return super.bindXtextResource();
	}

	@Override
	public Class<? extends ResourceSet> bindResourceSet() {
		return super.bindResourceSet();
	}

	@Override
	public Class<? extends XtextResourceSet> bindXtextResourceSet() {
		return super.bindXtextResourceSet();
	}

	@Override
	public void configureRuntimeEncodingProvider(Binder binder) {
		super.configureRuntimeEncodingProvider(binder);
	}

	@Override
	public Class<? extends Runtime> bindRuntimeEncodingProvider() {
		return super.bindRuntimeEncodingProvider();
	}

	@Override
	public Class<? extends Provider<IEncodingProvider>> provideIEncodingProvider() {
		return super.provideIEncodingProvider();
	}

	@Override
	public void configureIResourceDescriptionsBuilderScope(Binder binder) {
		super.configureIResourceDescriptionsBuilderScope(binder);
	}

	@Override
	public void configureIResourceDescriptionsLiveScope(Binder binder) {
		super.configureIResourceDescriptionsLiveScope(binder);
	}

	@Override
	public void configureGenericSemanticSequencer(Binder binder) {
		super.configureGenericSemanticSequencer(binder);
	}

	@Override
	public void configureUseIndexFragmentsForLazyLinking(Binder binder) {
		super.configureUseIndexFragmentsForLazyLinking(binder);
	}
	
}
